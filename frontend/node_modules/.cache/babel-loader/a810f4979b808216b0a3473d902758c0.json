{"ast":null,"code":"var _jsxFileName = \"/Users/kathleenkang/Desktop/mbti/src/components/BingoBoard.js\",\n    _s = $RefreshSig$();\n\nimport \"./BingoBoard.css\";\nimport { useLocation } from \"react-router-dom\";\nimport bingoContentData from \"../bingoContentData.json\"; // import mistypeContentData from \"../mistypesData.json\";\n// function BingoBoard({ items }) {\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction BingoBoard(_ref) {\n  _s();\n\n  let {\n    mbti,\n    board,\n    onBoardChange,\n    show,\n    isMysteryBingo,\n    disableClick\n  } = _ref;\n  const items = bingoContentData.find(obj => obj.id == mbti).items;\n  const pathname = useLocation().pathname; // const isMysteryBingo = pathname === \"/mysterybingo\";\n  // console.log(pathname);\n  // splitting an array into chunks of 5 items each\n\n  let rows = [];\n  const size = 5;\n\n  for (let i = 0; i < items.length; i += size) rows.push(items.slice(i, i + size)); // let rowDivs = [];\n  // for (let i = 0; i < rows.length; i++) {\n  //   let currentRow = rows[i];\n  //   let colDivs = [];\n  //   for (let j = 0; j < currentRow.length; j++) {\n  //     let currentItem = currentRow[j];\n  //     colDivs.push(<div className=\"col\">{currentItem}</div>);\n  //   }\n  //   rowDivs.push(<div className=\"row\">{colDivs}</div>);\n  // }\n\n\n  let onClickSquare = (rowNum, colNum) => {\n    if (disableClick) {\n      return;\n    }\n\n    let newBoard = [...board];\n    newBoard[rowNum][colNum] = !newBoard[rowNum][colNum];\n    onBoardChange(newBoard);\n  };\n\n  let hasLongWord = text => {\n    return text.split(\" \").filter(word => word.length > 5).length > 0;\n  };\n\n  let isFreeSpace = (rowNum, colNum) => {\n    return rowNum == 2 && colNum == 2;\n  };\n\n  let renderSquare = (item, rowNum, colNum) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `square ${hasLongWord(item) ? \"long\" : \"\"} ${board[rowNum][colNum] ? \"activated\" : \"\"} ${isFreeSpace(rowNum, colNum) ? \"unclickable\" : \"\"}`,\n    onClick: () => onClickSquare(rowNum, colNum),\n    children: isFreeSpace(rowNum, colNum) && isMysteryBingo ? \"?\" : item\n  }, `square${colNum}`, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n\n  let renderRow = (row, rowNum) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: row.map((item, colNum) => renderSquare(item, rowNum, colNum))\n  }, `row${rowNum}`, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n\n  if (!show) {\n    return;\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"frame\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"frame-title\",\n        children: \"BINGO\".split(\"\").map(letter => /*#__PURE__*/_jsxDEV(\"span\", {\n          children: letter\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-container\",\n        children: rows.map(renderRow)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(BingoBoard, \"EuD9q2dZ34PfN/QO2OBhBzeMxmY=\", false, function () {\n  return [useLocation];\n});\n\n_c = BingoBoard;\nexport default BingoBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"BingoBoard\");","map":{"version":3,"sources":["/Users/kathleenkang/Desktop/mbti/src/components/BingoBoard.js"],"names":["useLocation","bingoContentData","BingoBoard","mbti","board","onBoardChange","show","isMysteryBingo","disableClick","items","find","obj","id","pathname","rows","size","i","length","push","slice","onClickSquare","rowNum","colNum","newBoard","hasLongWord","text","split","filter","word","isFreeSpace","renderSquare","item","renderRow","row","map","letter"],"mappings":"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","sourcesContent":["import \"./BingoBoard.css\";\nimport { useLocation } from \"react-router-dom\";\n\nimport bingoContentData from \"../bingoContentData.json\";\n// import mistypeContentData from \"../mistypesData.json\";\n\n// function BingoBoard({ items }) {\nfunction BingoBoard({\n  mbti,\n  board,\n  onBoardChange,\n  show,\n  isMysteryBingo,\n  disableClick,\n}) {\n  const items = bingoContentData.find((obj) => obj.id == mbti).items;\n  const pathname = useLocation().pathname;\n  // const isMysteryBingo = pathname === \"/mysterybingo\";\n  // console.log(pathname);\n\n  // splitting an array into chunks of 5 items each\n  let rows = [];\n  const size = 5;\n  for (let i = 0; i < items.length; i += size)\n    rows.push(items.slice(i, i + size));\n\n  // let rowDivs = [];\n  // for (let i = 0; i < rows.length; i++) {\n  //   let currentRow = rows[i];\n  //   let colDivs = [];\n  //   for (let j = 0; j < currentRow.length; j++) {\n  //     let currentItem = currentRow[j];\n  //     colDivs.push(<div className=\"col\">{currentItem}</div>);\n  //   }\n\n  //   rowDivs.push(<div className=\"row\">{colDivs}</div>);\n  // }\n\n  let onClickSquare = (rowNum, colNum) => {\n    if (disableClick) {\n      return;\n    }\n    let newBoard = [...board];\n    newBoard[rowNum][colNum] = !newBoard[rowNum][colNum];\n    onBoardChange(newBoard);\n  };\n\n  let hasLongWord = (text) => {\n    return text.split(\" \").filter((word) => word.length > 5).length > 0;\n  };\n\n  let isFreeSpace = (rowNum, colNum) => {\n    return rowNum == 2 && colNum == 2;\n  };\n\n  let renderSquare = (item, rowNum, colNum) => (\n    <div\n      className={`square ${hasLongWord(item) ? \"long\" : \"\"} ${\n        board[rowNum][colNum] ? \"activated\" : \"\"\n      } ${isFreeSpace(rowNum, colNum) ? \"unclickable\" : \"\"}`}\n      key={`square${colNum}`}\n      onClick={() => onClickSquare(rowNum, colNum)}\n    >\n      {isFreeSpace(rowNum, colNum) && isMysteryBingo ? \"?\" : item}\n    </div>\n  );\n\n  let renderRow = (row, rowNum) => (\n    <div className=\"row\" key={`row${rowNum}`}>\n      {row.map((item, colNum) => renderSquare(item, rowNum, colNum))}\n    </div>\n  );\n\n  if (!show) {\n    return;\n  }\n\n  return (\n    <>\n      <div className=\"frame\">\n        <div className=\"frame-title\">\n          {\"BINGO\".split(\"\").map((letter) => (\n            <span>{letter}</span>\n          ))}\n        </div>\n        <div className=\"board-container\">{rows.map(renderRow)}</div>\n      </div>\n    </>\n  );\n}\n\nexport default BingoBoard;\n"]},"metadata":{},"sourceType":"module"}