{"ast":null,"code":"var _jsxFileName = \"/Users/kathleenkang/Desktop/mbti/src/components/BingoBoard.js\",\n    _s = $RefreshSig$();\n\nimport \"./BingoBoard.css\";\nimport { useLocation } from \"react-router-dom\";\nimport bingoContentData from \"../bingoContentData.json\"; // import mistypeContentData from \"../mistypesData.json\";\n// function BingoBoard({ items }) {\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction BingoBoard(_ref) {\n  _s();\n\n  let {\n    mbti,\n    clickedArray,\n    setClickedArray\n  } = _ref;\n  const items = bingoContentData.find(obj => obj.id == mbti).items;\n  const pathname = useLocation().pathname;\n  console.log(pathname); // splitting an array into chunks of 5 items each\n\n  let rows = [];\n  const size = 5;\n\n  for (let i = 0; i < items.length; i += size) rows.push(items.slice(i, i + size)); // console.log(rows);\n  // let rowDivs = [];\n  // for (let i = 0; i < rows.length; i++) {\n  //   let currentRow = rows[i];\n  //   let colDivs = [];\n  //   for (let j = 0; j < currentRow.length; j++) {\n  //     let currentItem = currentRow[j];\n  //     colDivs.push(<div className=\"col\">{currentItem}</div>);\n  //   }\n  //   rowDivs.push(<div className=\"row\">{colDivs}</div>);\n  // }\n\n\n  let onClickSquare = (rowNum, colNum) => {\n    let newClickedArray = [...clickedArray];\n    newClickedArray[rowNum][colNum] = !newClickedArray[rowNum][colNum];\n    setClickedArray(newClickedArray);\n  };\n\n  let hasLongWord = text => {\n    return text.split(\" \").filter(word => word.length > 5).length > 0;\n  }; // 이거 너무 inefficient한가? specify row/colnum?\n\n\n  let isFreeSpace = text => {\n    return text == mbti;\n  }; // let isMysteryBingo = (props) => {\n  //   const location = useLocation();\n  //   return location.pathname;\n  // };\n\n\n  let renderSquare = (item, rowNum, colNum) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `square ${hasLongWord(item) ? \"long\" : \"\"} ${clickedArray[rowNum][colNum] ? \"activated\" : \"\"} ${isFreeSpace(item) ? \"unclickable\" : \"\"}`,\n    onClick: () => onClickSquare(rowNum, colNum),\n    children: item\n  }, `square${colNum}`, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n\n  let renderRow = (row, rowNum) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: row.map((item, colNum) => renderSquare(item, rowNum, colNum))\n  }, `row${rowNum}`, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"frame\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"frame-title\",\n        children: \"BINGO\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-container\",\n        children: rows.map(renderRow)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(BingoBoard, \"EuD9q2dZ34PfN/QO2OBhBzeMxmY=\", false, function () {\n  return [useLocation];\n});\n\n_c = BingoBoard;\nexport default BingoBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"BingoBoard\");","map":{"version":3,"sources":["/Users/kathleenkang/Desktop/mbti/src/components/BingoBoard.js"],"names":["useLocation","bingoContentData","BingoBoard","mbti","clickedArray","setClickedArray","items","find","obj","id","pathname","console","log","rows","size","i","length","push","slice","onClickSquare","rowNum","colNum","newClickedArray","hasLongWord","text","split","filter","word","isFreeSpace","renderSquare","item","renderRow","row","map"],"mappings":"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","sourcesContent":["import \"./BingoBoard.css\";\nimport { useLocation } from \"react-router-dom\";\n\nimport bingoContentData from \"../bingoContentData.json\";\n// import mistypeContentData from \"../mistypesData.json\";\n\n// function BingoBoard({ items }) {\nfunction BingoBoard({ mbti, clickedArray, setClickedArray }) {\n  const items = bingoContentData.find((obj) => obj.id == mbti).items;\n  const pathname = useLocation().pathname;\n  console.log(pathname);\n\n  // splitting an array into chunks of 5 items each\n  let rows = [];\n  const size = 5;\n  for (let i = 0; i < items.length; i += size)\n    rows.push(items.slice(i, i + size));\n  // console.log(rows);\n\n  // let rowDivs = [];\n  // for (let i = 0; i < rows.length; i++) {\n  //   let currentRow = rows[i];\n  //   let colDivs = [];\n  //   for (let j = 0; j < currentRow.length; j++) {\n  //     let currentItem = currentRow[j];\n  //     colDivs.push(<div className=\"col\">{currentItem}</div>);\n  //   }\n\n  //   rowDivs.push(<div className=\"row\">{colDivs}</div>);\n  // }\n\n  let onClickSquare = (rowNum, colNum) => {\n    let newClickedArray = [...clickedArray];\n    newClickedArray[rowNum][colNum] = !newClickedArray[rowNum][colNum];\n    setClickedArray(newClickedArray);\n  };\n\n  let hasLongWord = (text) => {\n    return text.split(\" \").filter((word) => word.length > 5).length > 0;\n  };\n\n  // 이거 너무 inefficient한가? specify row/colnum?\n  let isFreeSpace = (text) => {\n    return text == mbti;\n  };\n\n  // let isMysteryBingo = (props) => {\n  //   const location = useLocation();\n  //   return location.pathname;\n  // };\n\n  let renderSquare = (item, rowNum, colNum) => (\n    <div\n      className={`square ${hasLongWord(item) ? \"long\" : \"\"} ${\n        clickedArray[rowNum][colNum] ? \"activated\" : \"\"\n      } ${isFreeSpace(item) ? \"unclickable\" : \"\"}`}\n      key={`square${colNum}`}\n      onClick={() => onClickSquare(rowNum, colNum)}\n    >\n      {item}\n    </div>\n  );\n\n  let renderRow = (row, rowNum) => (\n    <div className=\"row\" key={`row${rowNum}`}>\n      {row.map((item, colNum) => renderSquare(item, rowNum, colNum))}\n    </div>\n  );\n\n  return (\n    <>\n      {/* <div className=\"container\">{rowDivs}</div> */}\n      <div className=\"frame\">\n        <div className=\"frame-title\">BINGO</div>\n        <div className=\"board-container\">{rows.map(renderRow)}</div>\n      </div>\n    </>\n  );\n}\n\nexport default BingoBoard;\n"]},"metadata":{},"sourceType":"module"}